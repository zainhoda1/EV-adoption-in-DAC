paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
# Load libraries
library(tidyverse)
library(cbcTools)
library(readr)
library(here)
data <- read_csv(here('data', 'choice_options1.csv'))
View(data)
View(data)
test<- range(1,5)
range?
test<- seq(from=1, to = 5, by =1)
test
test1 <- seq(from=6, to = 10, by =1)
test2 <- c(test, test1)
altID <- rep(test, times = 5)
test<- seq(from=1, to = 3, by =1)
altID <- rep(test, times = 5)
altID <- order(rep(test, times = 5))
test<- seq(from=1, to = 3, by =1)
altID <- order(rep(test, times = 5))
altID <- rep(test, times = 5)
alt1 <- order(altID)
alt1 <- arrange(altID)
alt1 <- arrange(altID1)
altID1 <- rep(test, times = 5)
alt1 <- arrange(altID1)
test<- seq(from=1, to = 3, by =1)
altID1 <- rep(test, times = 2)
alt1 <- arrange(altID1)
alt1 <- arrange(c(altID1))
test<- seq(from=1, to = 3, by =1)
altID1 <- rep(test, times = 2)
alt1 <- unlist(altID1)
alt1 <- order(unlist(altID1))
alt1 <- arrange(unlist(altID1))
my_dataframe <- as.data.frame(altID1)
View(my_dataframe)
my_dataframe <- arrange(as.data.frame(altID1))
View(my_dataframe)
my_dataframe <- (as.data.frame(altID1))
View(my_dataframe)
View(my_dataframe)
print(my_dataframe[order(my_dataframe$altID1)])
test<- seq(from=1, to = 3, by =1)
altID1 <- rep(test, times = 2)
my_dataframe <- (as.data.frame(altID1))
print(my_dataframe[order(my_dataframe$altID1)])
View(my_dataframe)
test<- seq(from=1, to = 3, by =1)
rows <- rep(test, times = 2)
test<- seq(from=1, to = 3, by =1)
rows <- rep(test, times = 2)
my_dataframe <- (as.data.frame(rows))
print(my_dataframe[order(my_dataframe$rows)])
print(my_dataframe[order(my_dataframe)])
print(my_dataframe[order(my_dataframe),])
print(my_dataframe[order(my_dataframe$rows),])
test<- seq(from=1, to = total, by =1)
rows <- rep(test, times = 5)
my_dataframe <- (as.data.frame(rows))
use< - my_dataframe[order(my_dataframe$rows),]
test<- seq(from=1, to = total, by =1)
rows <- rep(test, times = 5)
my_dataframe <- (as.data.frame(rows))
use<- my_dataframe[order(my_dataframe$rows),]
length(use)
View(data)
View(my_dataframe)
total <- 30000
test<- seq(from=1, to = total, by =1)
rows <- rep(test, times = 5)
my_dataframe <- (as.data.frame(rows))
use<- my_dataframe[order(my_dataframe$rows),]
length(use)
data1 <- data
data$obsID  <-use
data$respID
values <- data$respID
values <- data$respID..distinct()
values <- data$respID.distinct()
values <- unique(data$respID)
#test<- seq(from=1, to = total, by =1)
rows <- rep(values, times = 5)
my_dataframe <- (as.data.frame(rows))
101190/5
total <- 20238
test<- seq(from=1, to = total, by =1)
rows <- rep(test, times = 5)
my_dataframe <- (as.data.frame(rows))
use<- my_dataframe[order(my_dataframe$rows),]
length(use)
data$obsID  <-use
View(data)
data_mnl1 <- cbc_choices(
design = data,
obsID = "obsID"
)
View(data_mnl1)
names(data)[names(data) == 'choice'] <- 'max-pref'
View(data_mnl1)
names(data)[names(data) == 'choice'] <- 'max-pref'
names(data_mnl1)[names(data_mnl1) == 'choice'] <- 'max-pref'
View(data_mnl1)
View(data)
data_mnl1 <- cbc_choices(
design = data,
obsID = "obsID"
)
View(data_mnl1)
names(data_mnl1)[names(data_mnl1) == 'choice'] <- 'max-pref'
data_mnl2 <- cbc_choices(
design = data_mnl1,
obsID = "obsID"
)
View(data_mnl2)
names(data_mnl1)[names(data_mnl1) == 'choice'] <- 'min_pref'
names(data_mnl2)[names(data_mnl2) == 'choice'] <- 'min_pref'
# Load libraries
library(tidyverse)
library(cbcTools)
library(readr)
library(here)
data <- read_csv(here('data', 'choice_options1.csv'))
data <- read_csv(here('data', 'choice_options1.csv'))
values <- unique(data$respID)
data <- read_csv(here('data', 'choice_options1.csv'))
total <- 20238
test<- seq(from=1, to = total, by =1)
rows <- rep(test, times = 5)
my_dataframe <- (as.data.frame(rows))
use<- my_dataframe[order(my_dataframe$rows),]
length(use)
data$obsID  <-use
data_mnl1 <- cbc_choices(
design = data,
obsID = "obsID"
)
names(data_mnl1)[names(data_mnl1) == 'choice'] <- 'max_pref'
data_mnl2 <- cbc_choices(
design = data_mnl1,
obsID = "obsID"
)
names(data_mnl2)[names(data_mnl2) == 'choice'] <- 'min_pref'
View(data_mnl2)
write_csv(data_mnl2, here('data', 'simulated_data.csv'))
View(data_mnl2)
data_mnl2 %>% count(attribute, max_pref, sort = TRUE)
data_mnl2 %>%
filter(max_pref > 0) %>%
count(attribute, max_pref, sort = TRUE)
max_pref <- data_mnl2 %>%
filter(max_pref > 0) %>%
count(attribute, max_pref, sort = TRUE)
View(max_pref)
min_pref <- data_mnl2 %>%
filter(min_pref > 0) %>%
count(attribute, min_pref, sort = TRUE)
View(min_pref)
max_pref$n
sum(max_pref$n)
# Load libraries
library(tidyverse)
library(cbcTools)
library(readr)
library(here)
here()
p1 <- read_csv(here("data", "survey_data_download", "DAC_P1.csv"))
p2 <- read_csv(here("data", "survey_data_download", "DAC_P2.csv"))
p3 <- read_csv(here("data", "survey_data_download", "DAC_P3.csv"))
p4 <- read_csv(here("data", "survey_data_download", "DAC_P4.csv"))
p5 <- read_csv(here("data", "survey_data_download", "DAC_P5.csv"))
p1 <- p1 %>%
mutate(
created_p1 = ymd_hms(created, tz = "EST"),
ended =  ymd_hms(ended, tz = "EST"),
time_sec_p1 = as.numeric(ended - created, units = "secs")) %>%
# Select important columns
select(session,created_p1, ip_address, time_sec_p1, mc_car_make_1 , mc_car_make_2, zip_code)
p2 <- p2 %>%
mutate(
created_p2 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p2 = as.numeric(ended - created, units = "secs")) %>%
# Select important columns
select(session,created_p2, time_sec_p2, weeklyTravel, parking)
p3 <- p3 %>%
mutate(
created_p3 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p3 = as.numeric(ended - created, units = "secs")) %>%
# Select important columns
select(session,created_p3, time_sec_p3)
p4 <- p4 %>%
mutate(
created_p4 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p4 = as.numeric(ended - created, units = "secs")) %>%
# Select important columns
select(session,created_p4, time_sec_p4, name_electric_vehicle, max_subsidy)
p5 <- p5 %>%
mutate(
created_p5 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p5 = as.numeric(ended - created, units = "secs")) %>%
# Select important columns
select(session,created_p5, time_sec_p5, yearOfBirth, income, feedback)
# Join all parts together using the session variable
data <- p1 %>%
left_join(p2, by = "session") %>%
left_join(p3, by = "session") %>%
left_join(p4, by = "session") %>%
left_join(p5, by = "session") %>%
# No longer need session variable
select(-session)
head(data)
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(created_p5 > '2024-04-16 00:00:00')   %>%
filter(time_sec_p5> 0)
nrow(data)
View(data)
p1 <- read_csv(here("data", "survey_data_download", "DAC_P1.csv"))
p2 <- read_csv(here("data", "survey_data_download", "DAC_P2.csv"))
p3 <- read_csv(here("data", "survey_data_download", "DAC_P3.csv"))
p4 <- read_csv(here("data", "survey_data_download", "DAC_P4.csv"))
p5 <- read_csv(here("data", "survey_data_download", "DAC_P5.csv"))
p1 <- p1 %>%
mutate(
created_p1 = ymd_hms(created, tz = "EST"),
ended =  ymd_hms(ended, tz = "EST"),
time_sec_p1 = as.numeric(ended - created_p1, units = "secs")) %>%
# Select important columns
select(session,created_p1, ip_address, time_sec_p1, mc_car_make_1 , mc_car_make_2, zip_code)
p2 <- p2 %>%
mutate(
created_p2 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p2 = as.numeric(ended - created_p2, units = "secs")) %>%
# Select important columns
select(session,created_p2, time_sec_p2, weeklyTravel, parking)
p3 <- p3 %>%
mutate(
created_p3 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p3 = as.numeric(ended - created_p3, units = "secs")) %>%
# Select important columns
select(session,created_p3, time_sec_p3)
p4 <- p4 %>%
mutate(
created_p4 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p4 = as.numeric(ended - created_p4, units = "secs")) %>%
# Select important columns
select(session,created_p4, time_sec_p4, name_electric_vehicle, max_subsidy)
p5 <- p5 %>%
mutate(
created_p5 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p5 = as.numeric(ended - created_p5, units = "secs")) %>%
# Select important columns
select(session,created_p5, time_sec_p5, yearOfBirth, income, feedback)
# Join all parts together using the session variable
data <- p1 %>%
left_join(p2, by = "session") %>%
left_join(p3, by = "session") %>%
left_join(p4, by = "session") %>%
left_join(p5, by = "session") %>%
# No longer need session variable
select(-session)
head(data)
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(created_p5 > '2024-04-16 00:00:00')   %>%
filter(time_sec_p5> 0)
nrow(data)
View(data)
# Join all parts together using the session variable
data <- p1 %>%
left_join(p2, by = "session") %>%
left_join(p3, by = "session") %>%
left_join(p4, by = "session") %>%
left_join(p5, by = "session") %>%
# No longer need session variable
select(-session) %>%
mutate(total_time_min = (time_sec_p1+time_sec_p2+time_sec_p3+time_sec_p4+time_sec_p5)/60)
head(data)
# Load libraries
library(tidyverse)
library(cbcTools)
library(readr)
library(here)
here()
p1 <- read_csv(here("data", "survey_data_download", "DAC_P1.csv"))
p2 <- read_csv(here("data", "survey_data_download", "DAC_P2.csv"))
p3 <- read_csv(here("data", "survey_data_download", "DAC_P3.csv"))
p4 <- read_csv(here("data", "survey_data_download", "DAC_P4.csv"))
p5 <- read_csv(here("data", "survey_data_download", "DAC_P5.csv"))
p1 <- p1 %>%
mutate(
created_p1 = ymd_hms(created, tz = "EST"),
ended =  ymd_hms(ended, tz = "EST"),
time_sec_p1 = as.numeric(ended - created_p1, units = "secs")) %>%
# Select important columns
select(session,created_p1, ip_address, time_sec_p1, mc_car_make_1 , mc_car_make_2, zip_code)
p2 <- p2 %>%
mutate(
created_p2 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p2 = as.numeric(ended - created_p2, units = "secs")) %>%
# Select important columns
select(session,created_p2, time_sec_p2, weeklyTravel, parking)
p3 <- p3 %>%
mutate(
created_p3 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p3 = as.numeric(ended - created_p3, units = "secs")) %>%
# Select important columns
select(session,created_p3, time_sec_p3)
p4 <- p4 %>%
mutate(
created_p4 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p4 = as.numeric(ended - created_p4, units = "secs")) %>%
# Select important columns
select(session,created_p4, time_sec_p4, name_electric_vehicle, max_subsidy)
p5 <- p5 %>%
mutate(
created_p5 = ymd_hms(created),
ended =  ymd_hms(ended),
time_sec_p5 = as.numeric(ended - created_p5, units = "secs")) %>%
# Select important columns
select(session,created_p5, time_sec_p5, yearOfBirth, income, feedback)
# Join all parts together using the session variable
data <- p1 %>%
left_join(p2, by = "session") %>%
left_join(p3, by = "session") %>%
left_join(p4, by = "session") %>%
left_join(p5, by = "session") %>%
# No longer need session variable
select(-session) %>%
mutate(total_time_min = (time_sec_p1+time_sec_p2+time_sec_p3+time_sec_p4+time_sec_p5)/60)
head(data)
# Filter out bad responses ---------
nrow(data)
#2024-04-18 16:25:54
# Drop people who got screened out
data <- data %>%
filter(created_p5 > '2024-04-16 00:00:00')   %>%
filter(time_sec_p5> 0)
nrow(data)
View(data)
summary(data$total_time_min)
